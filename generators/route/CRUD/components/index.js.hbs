import React from 'react';
import { connect } from 'dva';
import { Layout } from 'antd';
import intl from "react-intl-universal";

import BaseComponent from 'components/BaseComponent';
import Toolbar from 'components/Toolbar';
{{#if isSearch}}
import SearchBar from 'components/SearchBar';
{{/if}}
import DataTable from 'components/DataTable';
import Button from 'components/Button';
import { ModalForm,{{#if isGroup}} ModalDragList,{{/if}} } from 'components/Modal';
import routerLinks from "@/utils/routerLinks";

import messages from '../messages';
import { createColumns,{{#if isGroup}} createForm{{pascalCase nameGroup}}Drag, {{/if}} } from './columns';
import './index.less';

const { Content, Header, Footer } = Layout;
const { Pagination } = DataTable;

@connect(({ {{camelCase name}}, global, loading }) => ({
  {{camelCase name}},
  global,
  loading: loading.models.{{camelCase name}}
}))
class {{ properCase name}} extends BaseComponent {
  constructor(props) {
    super(props);
    this.state = {
      record: null,
      visible: false,
{{#if isGroup}}      visibleDrag{{pascalCase nameGroup}}: false,{{/if}}
      rows: []
    }
  }

  handleDelete = records => {
    const { rows } = this.state;
    const { dispatch } = this.props;

    dispatch({
      type: '{{camelCase name}}/remove',
      payload: {
        records,
        success: () => {
          // If the operation is successful, exclude the deleted row in the selected row
          this.setState({
            rows: rows.filter(
              item => !records.some(jItem => jItem.rowKey === item.rowKey)
            )
          });
        }
      }
    });
  };

  handlePatch = (records) => {
    const { dispatch } = this.props;
    dispatch({ type: '{{camelCase name}}/patch', payload: { records }});
  }

  render() {
    const { {{camelCase name}}, loading, dispatch, history, location } = this.props;
    const { pageData,{{#if isGroup}} {{camelCase nameGroup}}s, {{camelCase name }}s, {{/if}} } = {{camelCase name}};
    const columns = this.setSortFilter(pageData, createColumns(this));
    const { rows, record, visible,{{#if isGroup}} visibleDrag{{pascalCase nameGroup}},{{/if}} } = this.state;

    {{#if isSearch}}
    const searchBarProps = {
      columns,
      onSearch: values => history.replace(location.pathname + pageData.toParams({...pageData, filters: {...values}}))
    };
    {{/if}}
    const dataTableProps = {
      loading,
      columns,
      dataItems: pageData,
      selectedRowKeys: rows.map(item => item.id),
      onChange: (page) => history.replace(location.pathname +pageData.toParams(page)),
      onSelect: (keys, rows) => this.setState({ rows })
    };
    const modalFormProps = {
      loading,
      record,
      visible,
      columns,
      modalOpts: {
        width: 1200
      },
      formOpts: {
        cols: {
          xs: 24,
          md: 12,
          xl: 12
        }
      },
      onCancel: () => this.setState({ record: null, visible: false }),
      onSubmit: values => {
        dispatch({
          type: '{{camelCase name}}/save',
          payload: {
            values: !record ? values : {...values, id: record.id},
            success: () => this.setState({ record: null, visible: false})
          }
        });
      }
    };
    {{#if isGroup}}
    const dragProps = (columns, data, key, visible, visibleKey, title, maxDepth, name, url, readOnly = false, callArray = undefined, checkCallArray = undefined, className) => {
      return {
        loading, columns, data, visible, title, maxDepth,
        callArray, checkCallArray, readOnly, className,
        onSubmit: (data, value) => {
          if (value) dispatch({
            type: `{{camelCase name}}/change${name}`,
            payload: {
              value, data,
              permissions: {
                "post": this.checkPermission(url, "POST"),
                "put" : this.checkPermission(url, "PUT")
              }
            }
          });
          else dispatch({ type: "{{camelCase name}}/@change", payload: { [key]: data }})
        },
        onDrag: (data) => dispatch({ type: "{{camelCase name}}/@change", payload: { [key]: data }}),
        onCancel: () => this.setState({ [visibleKey]: false }),
        onSave: () => {
          dispatch({
            type: `{{camelCase name}}/change${name}`,
            payload: {
              value: null, data,
              permissions: {
                "post": this.checkPermission(url, "POST"),
                "put" : this.checkPermission(url, "PUT")
              }
            }
          })
          this.setState({ [visibleKey]: false });
        },
        onDelete: (id) => {
          if (id > 0) dispatch({ type: `{{camelCase name}}/remove${name}`, payload: id })
          else dispatch({ type: "{{camelCase name}}/@change", payload: this.deleteItem(data, id) })
        },
        checkPermission: (method) => this.checkPermission(url, method),
      };
    }
    const modalDrag{{pascalCase nameGroup}}Props = dragProps(
      createForm{{pascalCase nameGroup}}Drag({{camelCase name}}s.map(item => { return { code: item.id, codeName: item.name } })), {{camelCase nameGroup}}s, "{{camelCase nameGroup}}s", visibleDrag{{pascalCase nameGroup}}, "visibleDrag{{pascalCase nameGroup}}",
      intl.formatMessage(messages.{{camelCase nameGroup}}), 1,"{{pascalCase nameGroup}}", routerLinks("{{properCase nameGroup}}", "api"));
    {{/if}}
    return (
      <Layout className="full-layout {{camelCase name}}-page">
        <Header>
          <Toolbar
            appendLeft={
              <Button.Group>
                {this.checkPermission(routerLinks("{{properCase name}}", "api"), "POST") && (
                  <Button type="primary" icon={<i className="las la-plus" />} onClick={this.onAdd}>
                    {intl.formatMessage(messages.add)}
                  </Button>
                )}
                {this.checkPermission(routerLinks("{{properCase name}}", "api"), "DELETE") && (
                  <Button
                    type="primary"
                    disabled={!rows.length}
                    onClick={e => this.onDelete(rows)}
                    icon={<i className="las la-trash-alt" />}
                  >
                    {intl.formatMessage(messages.delete)}
                  </Button>
                )}
              </Button.Group>
            }
            {{#if isSearch}}
            pullDown={<SearchBar type="grid" {...searchBarProps} />}
            {{/if}}
          >
            {{#if isGroup}}
            <Button.Group>
              {this.checkPermission(routerLinks("{{ properCase nameGroup }}", "api")) && (
                <Button
                  type="primary"
                  icon={<i className="las la-bars" />} onClick={() => this.setState({ visibleDrag{{pascalCase nameGroup}}: true })}
                >
                  {intl.formatMessage(messages.{{camelCase nameGroup}})}
                </Button>
              )}
            </Button.Group>
            {{/if}}
            {{#if isSearch}}
            <SearchBar group="abc" {...searchBarProps} />
            {{/if}}
          </Toolbar>
        </Header>
        <Content className="has-footer">
          <DataTable {...dataTableProps} />
        </Content>
        <Footer>
          <Pagination {...dataTableProps} />
        </Footer>
        <ModalForm {...modalFormProps} />
        {{#if isGroup}}
        {this.checkPermission(routerLinks("{{ properCase nameGroup }}", "api")) && <ModalDragList {...modalDrag{{pascalCase nameGroup}}Props} />}
        {{/if}}
      </Layout>
    );
  }
}

export default {{ properCase name }};
